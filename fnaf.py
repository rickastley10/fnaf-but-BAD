#! /usr/bin/env python3
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 8.0
#  in conjunction with Tcl version 8.6
#    Aug 29, 2025 07:43:19 PM %z  platform: Windows NT

import sys
import tkinter as tk
import tkinter.ttk as ttk
from tkinter.constants import *
import os.path
import os

_location = os.path.dirname(__file__)

import fnaf_support


_bgcolor = '#d9d9d9'
_fgcolor = '#000000'
_tabfg1 = 'black' 
_tabfg2 = 'white' 
_bgmode = 'light' 
_tabbg1 = '#d9d9d9' 
_tabbg2 = 'gray40' 

class Toplevel1:
    global freddyind1, freddyind2
    freddyind1 = False
    freddyind2 = False
    
    def __init__(self, top=None):



        
        if freddyind1 == True:
            door1()
        if freddyind2 == True:
            door2()
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''

        #top.geometry("600x450+660+210")
        top.geometry("900x600")
        top.minsize(120, 1)
        top.maxsize(1924, 1061)
        top.resizable(1,  1)
        top.title("Toplevel 0")
        top.configure(background="#d9d9d9")
        top.configure(highlightbackground="#d9d9d9")
        top.configure(highlightcolor="#000000")

        self.top = top
        _debug = True # False to eliminate debug printing from callback functions.
        
        
        


        self.Label1 = tk.Label(self.top)
        self.Label1.place(relx=0.0, rely=0.022, height=431, width=900)
        self.Label1.configure(activebackground="#d9d9d9")
        self.Label1.configure(activeforeground="black")
        self.Label1.configure(anchor='w')
        self.Label1.configure(background="#d9d9d9")
        self.Label1.configure(compound='left')
        self.Label1.configure(disabledforeground="#a3a3a3")
        self.Label1.configure(foreground="#000000")
        self.Label1.configure(highlightbackground="#d9d9d9")
        self.Label1.configure(highlightcolor="#000000")
        photo_location = os.path.join(_location,"./office.png")
        global _img0
        _img0 = tk.PhotoImage(file=photo_location)
        self.Label1.configure(image=_img0)
        self.Label1.configure(text='''Label''')

        
        global Label1

        Label1 = self.Label1

        global door_1
        door_1 = 0
        door_1 = 2
        
        def door1(*args):
            
            
            global door_2
            global door_1
            global office
            
            photo_locationoffice = os.path.join(_location,"./office.png")
            office = tk.PhotoImage(file=photo_locationoffice)

            global door_LD
            global photo_locationLD
            photo_locationLD = os.path.join(_location,"./office_LD.png")
            door_LD = tk.PhotoImage(file=photo_locationLD)
            if _debug:
                print('fnaf_support.door1')
                for arg in args:
                    print ('    another arg:', arg)
                sys.stdout.flush()

                door_1 = door_1 + 1
                if door_1 == 2:
                    door_1 = 0
                print(door_1)
                if door_1 == 0 and door_2 == 0:
                    
                    self.Label1.configure(image= office)

                if door_1 == 1:
                    door_2 = 0
                    self.Label1.configure(image= door_LD)

            if freddyind1 == True:
                if door_1 == 1:
                    print("continue")
                    Toplevel1.monster_movement(self=tk)
                elif door_1 == 0:
                    print("exit")
                    tk.Toplevel.destroy()
        global door_2
        door_2 = 0

        def door2(*args):
            global door_2
            global door_1
            global office


            


            photo_locationoffice = os.path.join(_location,"./office.png")
            office = tk.PhotoImage(file=photo_locationoffice)

            global door_LD
            global photo_locationLD
            global door_RD
            photo_locationRD = os.path.join(_location,"./office_RD.png")
            door_RD = tk.PhotoImage(file=photo_locationRD)
            

            if _debug:
                print('fnaf_support.door2')
                for arg in args:
                    print ('    another arg:', arg)
                sys.stdout.flush()

                door_2 = door_2 + 1
                if door_2 == 2:
                    door_2 = 0
                print(door_2)
                if door_1 == 0 and door_2 == 0:
                    
                    self.Label1.configure(image= office)
                if door_2 == 1:
                    door_1 = 0
                    self.Label1.configure(image= door_RD)
            if freddyind2 == True:
                if door_2 == 1:
                    print("continue")
                    Toplevel1.monster_movement(self=tk)
                elif door_2 == 0:
                    print("exit")
                    tk.Toplevel.destroy()

        
            
        self.Button1 = tk.Button(self.top)
        self.Button1.place(relx=0.0, rely=0.422, height=66, width=77)
        self.Button1.configure(activebackground="#d9d9d9")
        self.Button1.configure(activeforeground="black")
        self.Button1.configure(background="#d9d9d9")
        self.Button1.configure(command=door1)
        self.Button1.configure(disabledforeground="#a3a3a3")
        self.Button1.configure(foreground="#000000")
        self.Button1.configure(highlightbackground="#d9d9d9")
        self.Button1.configure(highlightcolor="#000000")
        self.Button1.configure(text='''door''')
        
        def cams():
            print("ERROR404: license doesnt exist")
            os.startfile("helper.py")
            
            print("freddy off")
            Toplevel1.monster_movement(self=tk)

            
        self.Button1_1 = tk.Button(self.top)
        self.Button1_1.place(relx=0.867, rely=0.422, height=66, width=77)
        self.Button1_1.configure(activebackground="#d9d9d9")
        self.Button1_1.configure(activeforeground="black")
        self.Button1_1.configure(background="#d9d9d9")
        self.Button1_1.configure(command=door2)
        self.Button1_1.configure(disabledforeground="#a3a3a3")
        self.Button1_1.configure(font="-family {Segoe UI} -size 9")
        self.Button1_1.configure(foreground="#000000")
        self.Button1_1.configure(highlightbackground="#d9d9d9")
        self.Button1_1.configure(highlightcolor="#000000")
        self.Button1_1.configure(text='''door''')
        
        self.Button1_2 = tk.Button(self.top)
        self.Button1_2.place(relx=0.283, rely=0.844, height=66, width=277)
        self.Button1_2.configure(activebackground="#d9d9d9")
        self.Button1_2.configure(activeforeground="black")
        self.Button1_2.configure(background="#d9d9d9")
        self.Button1_2.configure(command=cams)
        self.Button1_2.configure(disabledforeground="#a3a3a3")
        self.Button1_2.configure(font="-family {Segoe UI} -size 9")
        self.Button1_2.configure(foreground="#000000")
        self.Button1_2.configure(highlightbackground="#d9d9d9")
        self.Button1_2.configure(highlightcolor="#000000")
        self.Button1_2.configure(text='''cameras''')

        #monster_movement()
        
    def monster_movement(self):
            import random as r
            import time as t
            global Label1
            self.Label1 = Label1
            


            photo_locationLM = os.path.join(_location,"./office_LM.png")
            door_LM = tk.PhotoImage(file=photo_locationLM)

            photo_locationRM = os.path.join(_location,"./office_RM.png")
            door_RM = tk.PhotoImage(file=photo_locationRM)
            
            monstermoves = r.randint(1,4)

            print(monstermoves)
            if monstermoves == 1:
                whichdoor = r.randint(1,2)
                if whichdoor == 1:
                    self.Label1.configure(image= door_LM)
                    self.Label1.update()
                    t.sleep(3)
                    if door_1 == 1:
                        #monster_movement()
                        print("monster movement")
                    else:
                        t.sleep(0.5)
                        
                        if door_1 == 1:
                            #monster_movement()
                            print("monster movement")
                        elif door_1 == 0:
                            global freddyind1
                            freddyind1 = True
                            Toplevel1.__init__
                        else:
                            #monster_movement()
                            print("monster movement")

                if whichdoor == 2:
                    self.Label1.configure(image= door_RM)
                    self.Label1.update()
                    t.sleep(3)
                    if door_2 == 1:
                        #monster_movement()
                        print("monster movement")
                    else:
                        t.sleep(0.5)
                        
                        if door_2 == 1:
                            #monster_movement()
                            print("monster movement")
                        elif door_2 == 0:
                            global freddyind2
                            freddyind2 = True
                            Toplevel1.__init__
                        else:
                            #monster_movement()
                            print("monster movement")
            else:
                print("loop")
                Toplevel1.monster_movement(self=tk)
                print("monster movement")


def start_up():
    fnaf_support.main()

if __name__ == '__main__':
    fnaf_support.main()




